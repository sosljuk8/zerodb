// Code generated by ent, DO NOT EDIT.

package ent

import (
	"composeapp/ent/settings"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SettingsCreate is the builder for creating a Settings entity.
type SettingsCreate struct {
	config
	mutation *SettingsMutation
	hooks    []Hook
}

// SetCategoryID sets the "category_id" field.
func (sc *SettingsCreate) SetCategoryID(i int) *SettingsCreate {
	sc.mutation.SetCategoryID(i)
	return sc
}

// SetName sets the "name" field.
func (sc *SettingsCreate) SetName(s string) *SettingsCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableName(s *string) *SettingsCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetValue sets the "value" field.
func (sc *SettingsCreate) SetValue(s string) *SettingsCreate {
	sc.mutation.SetValue(s)
	return sc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableValue(s *string) *SettingsCreate {
	if s != nil {
		sc.SetValue(*s)
	}
	return sc
}

// SetUID sets the "uid" field.
func (sc *SettingsCreate) SetUID(i int) *SettingsCreate {
	sc.mutation.SetUID(i)
	return sc
}

// SetCreated sets the "created" field.
func (sc *SettingsCreate) SetCreated(i int) *SettingsCreate {
	sc.mutation.SetCreated(i)
	return sc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableCreated(i *int) *SettingsCreate {
	if i != nil {
		sc.SetCreated(*i)
	}
	return sc
}

// SetActuality sets the "actuality" field.
func (sc *SettingsCreate) SetActuality(i int) *SettingsCreate {
	sc.mutation.SetActuality(i)
	return sc
}

// SetNillableActuality sets the "actuality" field if the given value is not nil.
func (sc *SettingsCreate) SetNillableActuality(i *int) *SettingsCreate {
	if i != nil {
		sc.SetActuality(*i)
	}
	return sc
}

// Mutation returns the SettingsMutation object of the builder.
func (sc *SettingsCreate) Mutation() *SettingsMutation {
	return sc.mutation
}

// Save creates the Settings in the database.
func (sc *SettingsCreate) Save(ctx context.Context) (*Settings, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SettingsCreate) SaveX(ctx context.Context) *Settings {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SettingsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SettingsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SettingsCreate) defaults() {
	if _, ok := sc.mutation.Name(); !ok {
		v := settings.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.Value(); !ok {
		v := settings.DefaultValue
		sc.mutation.SetValue(v)
	}
	if _, ok := sc.mutation.Created(); !ok {
		v := settings.DefaultCreated
		sc.mutation.SetCreated(v)
	}
	if _, ok := sc.mutation.Actuality(); !ok {
		v := settings.DefaultActuality
		sc.mutation.SetActuality(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SettingsCreate) check() error {
	if _, ok := sc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "Settings.category_id"`)}
	}
	if v, ok := sc.mutation.CategoryID(); ok {
		if err := settings.CategoryIDValidator(v); err != nil {
			return &ValidationError{Name: "category_id", err: fmt.Errorf(`ent: validator failed for field "Settings.category_id": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Settings.name"`)}
	}
	if _, ok := sc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Settings.value"`)}
	}
	if _, ok := sc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Settings.uid"`)}
	}
	if v, ok := sc.mutation.UID(); ok {
		if err := settings.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf(`ent: validator failed for field "Settings.uid": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Settings.created"`)}
	}
	if _, ok := sc.mutation.Actuality(); !ok {
		return &ValidationError{Name: "actuality", err: errors.New(`ent: missing required field "Settings.actuality"`)}
	}
	return nil
}

func (sc *SettingsCreate) sqlSave(ctx context.Context) (*Settings, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SettingsCreate) createSpec() (*Settings, *sqlgraph.CreateSpec) {
	var (
		_node = &Settings{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(settings.Table, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.CategoryID(); ok {
		_spec.SetField(settings.FieldCategoryID, field.TypeInt, value)
		_node.CategoryID = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(settings.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Value(); ok {
		_spec.SetField(settings.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := sc.mutation.UID(); ok {
		_spec.SetField(settings.FieldUID, field.TypeInt, value)
		_node.UID = value
	}
	if value, ok := sc.mutation.Created(); ok {
		_spec.SetField(settings.FieldCreated, field.TypeInt, value)
		_node.Created = value
	}
	if value, ok := sc.mutation.Actuality(); ok {
		_spec.SetField(settings.FieldActuality, field.TypeInt, value)
		_node.Actuality = value
	}
	return _node, _spec
}

// SettingsCreateBulk is the builder for creating many Settings entities in bulk.
type SettingsCreateBulk struct {
	config
	err      error
	builders []*SettingsCreate
}

// Save creates the Settings entities in the database.
func (scb *SettingsCreateBulk) Save(ctx context.Context) ([]*Settings, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Settings, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SettingsCreateBulk) SaveX(ctx context.Context) []*Settings {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SettingsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
