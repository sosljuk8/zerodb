// Code generated by ent, DO NOT EDIT.

package categories

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the categories type in the database.
	Label = "categories"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSystemName holds the string denoting the system_name field in the database.
	FieldSystemName = "system_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the categories in the database.
	Table = "categories"
)

// Columns holds all SQL columns for categories fields.
var Columns = []string{
	FieldID,
	FieldParentID,
	FieldName,
	FieldSystemName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID int
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultSystemName holds the default value on creation for the "system_name" field.
	DefaultSystemName string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
)

// OrderOption defines the ordering options for the Categories queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySystemName orders the results by the system_name field.
func BySystemName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}
