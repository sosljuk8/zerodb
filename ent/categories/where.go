// Code generated by ent, DO NOT EDIT.

package categories

import (
	"composeapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Categories {
	return predicate.Categories(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Categories {
	return predicate.Categories(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Categories {
	return predicate.Categories(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Categories {
	return predicate.Categories(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Categories {
	return predicate.Categories(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Categories {
	return predicate.Categories(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Categories {
	return predicate.Categories(sql.FieldLTE(FieldID, id))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldParentID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldName, v))
}

// SystemName applies equality check predicate on the "system_name" field. It's identical to SystemNameEQ.
func SystemName(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldSystemName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldDescription, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Categories {
	return predicate.Categories(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Categories {
	return predicate.Categories(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Categories {
	return predicate.Categories(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int) predicate.Categories {
	return predicate.Categories(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int) predicate.Categories {
	return predicate.Categories(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int) predicate.Categories {
	return predicate.Categories(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int) predicate.Categories {
	return predicate.Categories(sql.FieldLTE(FieldParentID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContainsFold(FieldName, v))
}

// SystemNameEQ applies the EQ predicate on the "system_name" field.
func SystemNameEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldSystemName, v))
}

// SystemNameNEQ applies the NEQ predicate on the "system_name" field.
func SystemNameNEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldNEQ(FieldSystemName, v))
}

// SystemNameIn applies the In predicate on the "system_name" field.
func SystemNameIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldIn(FieldSystemName, vs...))
}

// SystemNameNotIn applies the NotIn predicate on the "system_name" field.
func SystemNameNotIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldNotIn(FieldSystemName, vs...))
}

// SystemNameGT applies the GT predicate on the "system_name" field.
func SystemNameGT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGT(FieldSystemName, v))
}

// SystemNameGTE applies the GTE predicate on the "system_name" field.
func SystemNameGTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGTE(FieldSystemName, v))
}

// SystemNameLT applies the LT predicate on the "system_name" field.
func SystemNameLT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLT(FieldSystemName, v))
}

// SystemNameLTE applies the LTE predicate on the "system_name" field.
func SystemNameLTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLTE(FieldSystemName, v))
}

// SystemNameContains applies the Contains predicate on the "system_name" field.
func SystemNameContains(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContains(FieldSystemName, v))
}

// SystemNameHasPrefix applies the HasPrefix predicate on the "system_name" field.
func SystemNameHasPrefix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasPrefix(FieldSystemName, v))
}

// SystemNameHasSuffix applies the HasSuffix predicate on the "system_name" field.
func SystemNameHasSuffix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasSuffix(FieldSystemName, v))
}

// SystemNameEqualFold applies the EqualFold predicate on the "system_name" field.
func SystemNameEqualFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEqualFold(FieldSystemName, v))
}

// SystemNameContainsFold applies the ContainsFold predicate on the "system_name" field.
func SystemNameContainsFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContainsFold(FieldSystemName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Categories {
	return predicate.Categories(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Categories {
	return predicate.Categories(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Categories {
	return predicate.Categories(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Categories {
	return predicate.Categories(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Categories {
	return predicate.Categories(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Categories) predicate.Categories {
	return predicate.Categories(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Categories) predicate.Categories {
	return predicate.Categories(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Categories) predicate.Categories {
	return predicate.Categories(sql.NotPredicates(p))
}
