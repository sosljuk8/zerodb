// Code generated by ent, DO NOT EDIT.

package settings

import (
	"composeapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldID, id))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCategoryID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldName, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldValue, v))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUID, v))
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreated, v))
}

// Actuality applies equality check predicate on the "actuality" field. It's identical to ActualityEQ.
func Actuality(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldActuality, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCategoryID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldName, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldValue, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldUID, v))
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCreated, v))
}

// ActualityEQ applies the EQ predicate on the "actuality" field.
func ActualityEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldActuality, v))
}

// ActualityNEQ applies the NEQ predicate on the "actuality" field.
func ActualityNEQ(v int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldActuality, v))
}

// ActualityIn applies the In predicate on the "actuality" field.
func ActualityIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldActuality, vs...))
}

// ActualityNotIn applies the NotIn predicate on the "actuality" field.
func ActualityNotIn(vs ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldActuality, vs...))
}

// ActualityGT applies the GT predicate on the "actuality" field.
func ActualityGT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldActuality, v))
}

// ActualityGTE applies the GTE predicate on the "actuality" field.
func ActualityGTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldActuality, v))
}

// ActualityLT applies the LT predicate on the "actuality" field.
func ActualityLT(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldActuality, v))
}

// ActualityLTE applies the LTE predicate on the "actuality" field.
func ActualityLTE(v int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldActuality, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.NotPredicates(p))
}
