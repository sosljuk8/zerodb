// Code generated by ent, DO NOT EDIT.

package settings

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldActuality holds the string denoting the actuality field in the database.
	FieldActuality = "actuality"
	// Table holds the table name of the settings in the database.
	Table = "settings"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldCategoryID,
	FieldName,
	FieldValue,
	FieldUID,
	FieldCreated,
	FieldActuality,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CategoryIDValidator is a validator for the "category_id" field. It is called by the builders before save.
	CategoryIDValidator func(int) error
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultValue holds the default value on creation for the "value" field.
	DefaultValue string
	// UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	UIDValidator func(int) error
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated int
	// DefaultActuality holds the default value on creation for the "actuality" field.
	DefaultActuality int
)

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByActuality orders the results by the actuality field.
func ByActuality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActuality, opts...).ToFunc()
}
